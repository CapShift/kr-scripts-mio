<?xml version="1.0" encoding="UTF-8" ?>
<root>
    <group title="Page测试">
        <!--
            子页面解析、执行顺序：

            1. 分页功能加载前：[before-read] / [before-load]
            2. 解析配置内容：[config-sh] / [config]
            3. 配置解析完后：[after-read] / [after-load]

            4. 页面加载【成功】：[load-ok] / [load-success]
            4. 页面加载【失败】：[load-fail] / [after-error]
        -->
        <page after-read="sleep 2" before-read="sleep 5"
            config="samples/configs/kernel_tuner.xml">
            <title>page功能测试</title>
            <desc>来试试page的新功能</desc>
        </page>

        <!--直接输出配置文件所在的绝对路径。可以通过 “file:///android_asset” 开头来指定assets中的文件-->
        <page after-read="sleep 1" before-read="sleep 1"
            config-sh="echo 'file:///android_asset/samples/configs/kernel_tuner.xml'">
            <title>测试config-sh【assets路径输出】</title>
            <desc>通过config-sh输出配置页所在位置，它可以是在assets中的文件</desc>
        </page>

        <!--直接输出配置文件所在的绝对路径-->
        <page after-read="sleep 1" before-read="sleep 1" config-sh="echo '/sdcard/text_test.xml'">
            <title>测试config-sh【路径输出】</title>
            <desc>通过config-sh输出配置页所在位置</desc>
        </page>

        <!--直接输出配置文件内容，当识别到 内容以“<?xml”开头且以“>”结尾，自动作为xml配置内容解析-->
        <page after-read="sleep 1" before-read="sleep 1" config-sh="cat /sdcard/text_test.xml">
            <title>测试config-sh【全文输出】</title>
            <desc>通过config-sh输出配置页内容</desc>
        </page>

        <!--支持指定activity-->
        <page id="dev" activity="com.android.settings.APPLICATION_DEVELOPMENT_SETTINGS">
            <title>开发者选项</title>
        </page>
    </group>
</root>